[
  {
    "messages": [
      {
        "role": "user",
        "content": "write a program that computes the overtime payroll for a company with the following employee data: [ { name: \"Alice\", wage: 15, hours: 35 } { name: \"Bob\", wage: 20, hours: 50 } { name: \"Charlie\", wage: 18, hours: 40 } ]"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Function to calculate overtime pay for an employee\nlet overtimePay = <employee:\n  let wage = get employee \"wage\"..\n  let hours = get employee \"hours\"..\n  let regularPay = mul wage (min hours 40)..\n  let overtimeHours = max 0 (sub hours 40)..\n  let overtimeRate = mul 1.5 wage..\n  let overtimePay = mul overtimeHours overtimeRate..\n  add regularPay overtimePay\n>..\n\n| Calculate overtime pay for each employee  \nlet payroll = map (overtimePay) [\n  {name: \"Alice\" wage: 15 hours: 35}\n  {name: \"Bob\" wage: 20 hours: 50}\n  {name: \"Charlie\" wage: 18 hours: 40}  \n]..\n\n| Print the payroll\nprint payroll..\n```"
      }
    ],
    "code": "| Function to calculate overtime pay for an employee\nlet overtimePay = <employee:\n  let wage = get employee \"wage\"..\n  let hours = get employee \"hours\"..\n  let regularPay = mul wage (min hours 40)..\n  let overtimeHours = max 0 (sub hours 40)..\n  let overtimeRate = mul 1.5 wage..\n  let overtimePay = mul overtimeHours overtimeRate..\n  add regularPay overtimePay\n>..\n\n| Calculate overtime pay for each employee  \nlet payroll = map (overtimePay) [\n  {name: \"Alice\" wage: 15 hours: 35}\n  {name: \"Bob\" wage: 20 hours: 50}\n  {name: \"Charlie\" wage: 18 hours: 40}  \n]..\n\n| Print the payroll\nprint payroll..",
    "explanation": "L0002 program that transforms each element in a collection.",
    "expected_output": "overtimePay = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIjZvd3ZhWXR5TFZpTjRpcmxXNXFVIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "write a function that outputs the text 'hello world'"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\nHere is a function that outputs the text \"hello world\" in Graffiticode:\n\nlet greet = <: \"hello world\">.\n\nTo explain:\n- We define a function called `greet` using a lambda \n- The lambda takes no arguments, indicated by the empty angle brackets `<:`\n- The function body simply returns the string literal `\"hello world\"`\n\nSo calling `greet` will output the text \"hello world\".\n```"
      },
      {
        "role": "user",
        "content": "write a function that outputs the the text 'foo'. make sure to comment any commentary prose with the line comment delineator |"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Define a function named `foo` that takes no arguments\nlet foo = <:\n  | Return the string literal \"foo\"\n  \"foo\"  \n>.\n```"
      },
      {
        "role": "user",
        "content": "write a function that outputs the the text 'foo'. make sure to comment any commentary prose with the line comment delineator |. call that function at the top level of the program"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Define a function that returns the string \"foo\"\nlet fooFn = <: \"foo\">.\n\n| Call the fooFn function\nfooFn.\n```"
      },
      {
        "role": "user",
        "content": "write a function that outputs the the text 'foo'. make sure to comment any commentary prose with the line comment delineator |. call that function at the top level of the program. remember that let declaration and program terminators are the token .."
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Define a function that returns the string \"foo\"\nlet fooFn = <: \"foo\">.\n\n| Call the fooFn function\nfooFn ()..\n```"
      },
      {
        "role": "user",
        "content": "write a program that prints hello world. make sure to delineate comment with the line comment token |"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| This program prints the string \"Hello, world!\"\nlet main = <_: print \"Hello, world!\">..\\nmain ()..\"\n```"
      }
    ],
    "code": "| This program prints the string \"Hello, world!\"\nlet main = <_: print \"Hello, world!\">..\\nmain ()..\"",
    "explanation": "Short L0002 program with 3 operations that manipulates data.",
    "expected_output": "main = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIkJ2Uzg2R3RzQm5ha1FzUWtyWFhTIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 5
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "use the function range to generate a list of number between 0 and 100 incremented by 10"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Generate a list of numbers from 0 to 100 incremented by 10\nlet numbers = range 0 101 10..\nprint numbers..\n\n\n\n```"
      }
    ],
    "code": "| Generate a list of numbers from 0 to 100 incremented by 10\nlet numbers = range 0 101 10..\nprint numbers..",
    "explanation": "Short L0002 program with 2 operations that manipulates data.",
    "expected_output": "Output depends on execution",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIkVmb3dUMm5RdFZQRFlIRDRySXBSIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "get the value of binding 'x' from and object that contains 'x'"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Get the value of a binding (field) in a record\nlet obj = {x: 42 y: \"hello\"}..\nprint get \"x\" obj..\n```"
      }
    ],
    "code": "| Get the value of a binding (field) in a record\nlet obj = {x: 42 y: \"hello\"}..\nprint get \"x\" obj..",
    "explanation": "Short L0002 program with 2 operations that manipulates data.",
    "expected_output": "Output depends on execution",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIkZQQ3F1T1FYT3NkQmd2bmhtY3ROIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "write a program that prints hello world. make sure to delineate comment with the line comment token |"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\nlet main = <: print \"Hello, world!\">..\nmain..\"\n```"
      }
    ],
    "code": "let main = <: print \"Hello, world!\">..\nmain..\"",
    "explanation": "Short L0002 program with 3 operations that manipulates data.",
    "expected_output": "main = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIkkzT1I3SmpkRkdIeEQybTgxRnZ6Il19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "reduce a list of ten integers into the sum of their values"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Define a list of 10 integers\nlet numbers = [5 12 8 23 1 9 18 7 4 11]..\n\n| Use reduce to sum the values\n| The lambda takes an accumulator and the current number \n| It returns the accumulator plus the current number\nlet sum = reduce (<acc num: add acc num>) 0 numbers..\n\n| Print the final sum\nprint sum..\n```"
      }
    ],
    "code": "| Define a list of 10 integers\nlet numbers = [5 12 8 23 1 9 18 7 4 11]..\n\n| Use reduce to sum the values\n| The lambda takes an accumulator and the current number \n| It returns the accumulator plus the current number\nlet sum = reduce (<acc num: add acc num>) 0 numbers..\n\n| Print the final sum\nprint sum..",
    "explanation": "Short L0002 program with 3 operations that manipulates data.",
    "expected_output": "sum = [computed value]",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIko1ZFQ0TmI5bFlFOVNYMElzRmhZIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "write a program that computes the overtime payroll for a company with the following employee data: \nlet employees = [\n  { name: \"Alice\", wage: 15, hours: 35 }\n  { name: \"Bob\", wage: 20, hours: 50 } \n  { name: \"Charlie\", wage: 18, hours: 40 }\n]..\n"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\nlet add2 = <[a b]: add a b>..\n\n| Function to calculate an employee's pay including overtime\nlet calculatePay = <\n  employee: \n    let regularHours =\n      if lt get employee \"hours\" 40 \n        then get employee \"hours\" \n        else 40..\n  let overtimeHours =\n    if gt get employee \"hours\" 40\n      then sub get employee \"hours\" 40\n      else 0..\n  let regularPay =\n    mul get employee \"wage\" regularHours..\n  let overtimePay =\n    mul mul get employee \"wage\" 1.5 overtimeHours..\n  add regularPay overtimePay\n>..\n\n| Function to calculate total payroll for all employees\nlet calculatePayroll = <employees:\n  let payAmounts = map (calculatePay) employees..\n  reduce (add2) 0 payAmounts\n>..\n\n| Employee data\nlet employees = [\n  { name: \"Alice\", wage: 15, hours: 35 }\n  { name: \"Bob\", wage: 20, hours: 50 } \n  { name: \"Charlie\", wage: 18, hours: 40 }\n]..\n\n| Calculate the total payroll\nlet totalPayroll = calculatePayroll employees..\nprint totalPayroll..\n```"
      }
    ],
    "code": "let add2 = <[a b]: add a b>..\n\n| Function to calculate an employee's pay including overtime\nlet calculatePay = <\n  employee: \n    let regularHours =\n      if lt get employee \"hours\" 40 \n        then get employee \"hours\" \n        else 40..\n  let overtimeHours =\n    if gt get employee \"hours\" 40\n      then sub get employee \"hours\" 40\n      else 0..\n  let regularPay =\n    mul get employee \"wage\" regularHours..\n  let overtimePay =\n    mul mul get employee \"wage\" 1.5 overtimeHours..\n  add regularPay overtimePay\n>..\n\n| Function to calculate total payroll for all employees\nlet calculatePayroll = <employees:\n  let payAmounts = map (calculatePay) employees..\n  reduce (add2) 0 payAmounts\n>..\n\n| Employee data\nlet employees = [\n  { name: \"Alice\", wage: 15, hours: 35 }\n  { name: \"Bob\", wage: 20, hours: 50 } \n  { name: \"Charlie\", wage: 18, hours: 40 }\n]..\n\n| Calculate the total payroll\nlet totalPayroll = calculatePayroll employees..\nprint totalPayroll..",
    "explanation": "L0002 program that transforms each element in a collection.",
    "expected_output": "add2 = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIktvYUgwQ0Y2Qk9DQzJsdTRhY0hpIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "write a program that computes the overtime payroll for a company with the following employee data: [ { name: \"Alice\", wage: 15, hours: 35 } { name: \"Bob\", wage: 20, hours: 50 } { name: \"Charlie\", wage: 18, hours: 40 } ]"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Function to calculate overtime pay for an employee\nlet overtimePay = <acc employee:\n  let wage = get employee \"wage\"..\n  let hours = get employee \"hours\"..\n  let regularPay = mul wage (min hours 40)..\n  let overtimeHours = max 0 (sub hours 40)..\n  let overtimeRate = mul 1.5 wage..\n  let overtimePay = mul overtimeHours overtimeRate..\n  let name = get employee \"name\"..\n  set acc name add regularPay overtimePay\n>..\n\n| Calculate overtime pay for each employee  \nlet payroll = reduce (overtimePay) {} [\n  {name: \"Alice\" wage: 15 hours: 35}\n  {name: \"Bob\" wage: 20 hours: 50}\n  {name: \"Charlie\" wage: 18 hours: 40}  \n]..\n\n| Print the payroll\nprint payroll..\n```"
      }
    ],
    "code": "| Function to calculate overtime pay for an employee\nlet overtimePay = <acc employee:\n  let wage = get employee \"wage\"..\n  let hours = get employee \"hours\"..\n  let regularPay = mul wage (min hours 40)..\n  let overtimeHours = max 0 (sub hours 40)..\n  let overtimeRate = mul 1.5 wage..\n  let overtimePay = mul overtimeHours overtimeRate..\n  let name = get employee \"name\"..\n  set acc name add regularPay overtimePay\n>..\n\n| Calculate overtime pay for each employee  \nlet payroll = reduce (overtimePay) {} [\n  {name: \"Alice\" wage: 15 hours: 35}\n  {name: \"Bob\" wage: 20 hours: 50}\n  {name: \"Charlie\" wage: 18 hours: 40}  \n]..\n\n| Print the payroll\nprint payroll..",
    "explanation": "L0002 program that aggregates values from a collection.",
    "expected_output": "overtimePay = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIlFia3V0bk4yOFdtanB3QzZqWFJkIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "use the builtin function filter to filter a list of even numbers between 0 and 100 so that only tenth value is remaining. print the result"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Function to check if a number is a multiple of 10\nlet isMultipleOfTen = <x: eq mod x 10 0>..\n\n| Generate a list of even numbers from 0 to 100\nlet evens = range 0 101 2..\n\n| Filter the even numbers to only multiples of 10\nlet tens = filter (isMultipleOfTen) evens..\n\n| Print the resulting list\nprint tens..\n```"
      }
    ],
    "code": "| Function to check if a number is a multiple of 10\nlet isMultipleOfTen = <x: eq mod x 10 0>..\n\n| Generate a list of even numbers from 0 to 100\nlet evens = range 0 101 2..\n\n| Filter the even numbers to only multiples of 10\nlet tens = filter (isMultipleOfTen) evens..\n\n| Print the resulting list\nprint tens..",
    "explanation": "L0002 program that filters elements from a collection.",
    "expected_output": "isMultipleOfTen = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbImhxdzVnWE5SWHMyNmVucFhiOGJGIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "add 3 to a list of ten integers and print the result"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Generate a list of integers from 1 to 10\nlet numbers = range 1 10 1..\n\n| Function to add 3 to a number \nlet add3 = <x: add x 3>..\n\n| Apply add3 to each number in the list\nlet result = map (add3) numbers..\n\n| Print the resulting list\nprint result..\n```"
      }
    ],
    "code": "| Generate a list of integers from 1 to 10\nlet numbers = range 1 10 1..\n\n| Function to add 3 to a number \nlet add3 = <x: add x 3>..\n\n| Apply add3 to each number in the list\nlet result = map (add3) numbers..\n\n| Print the resulting list\nprint result..",
    "explanation": "L0002 program that transforms each element in a collection.",
    "expected_output": "result = [computed value]",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbImpsSWU2WUdTQktYellBSkJuSEVRIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "print the message 'hello, world!'"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| print the message 'hello, world!'\nprint 'hello, world!'..\n```"
      }
    ],
    "code": "| print the message 'hello, world!'\nprint 'hello, world!'..",
    "explanation": "Simple L0002 code that executes an operation.",
    "expected_output": "Output depends on execution",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbInFuUllPSEtWRkJWWmNZUlVpenNCIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "write me a program that uses tags to represent the colors blue, red and green. use a case of expression to distinguish between those tags"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Function to get color name from tag\nlet colorName = <color:\n  case color of\n    Blue: \"blue\"\n    Red: \"red\" \n    Green: \"green\"\n    _: \"unknown\"\n  end  \n>..\n\n| Example usage\nlet favoriteColor = Blue..\nprint `Your favorite color is ${colorName favoriteColor}.`..\n```"
      }
    ],
    "code": "| Function to get color name from tag\nlet colorName = <color:\n  case color of\n    Blue: \"blue\"\n    Red: \"red\" \n    Green: \"green\"\n    _: \"unknown\"\n  end  \n>..\n\n| Example usage\nlet favoriteColor = Blue..\nprint `Your favorite color is ${colorName favoriteColor}.`..",
    "explanation": "Short L0002 program with 3 operations that manipulates data.",
    "expected_output": "colorName = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbInJ4MGFSMmJnQzF1ZjVEMXI5cTlVIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "create an record with field named foo to 10 and then set another field named bar to 20"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\nlet obj = {foo: 10}..\nset \"bar\" 20 obj..\n..\n```"
      }
    ],
    "code": "let obj = {foo: 10}..\nset \"bar\" 20 obj..\n..",
    "explanation": "Short L0002 program with 2 operations that manipulates data.",
    "expected_output": "Output depends on execution",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbInVid21xa25weFdWd0M0aUdCTENnIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "write fizzbuzz and print the result"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\nlet fizzBuzz = <n:\n  if eq 0 mod n 15 then \"FizzBuzz\"\n  else if eq 0 mod n 3 then \"Fizz\"\n  else if eq 0 mod n 5 then \"Buzz\"\n  else n\n>..\nlet numbers = range 1 101 1..\nlet result = map (fizzBuzz) numbers..\nprint result..\n```"
      }
    ],
    "code": "let fizzBuzz = <n:\n  if eq 0 mod n 15 then \"FizzBuzz\"\n  else if eq 0 mod n 3 then \"Fizz\"\n  else if eq 0 mod n 5 then \"Buzz\"\n  else n\n>..\nlet numbers = range 1 101 1..\nlet result = map (fizzBuzz) numbers..\nprint result..",
    "explanation": "L0002 program that transforms each element in a collection.",
    "expected_output": "result = [computed value]",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbIncwWlRSVFZlZDJtUDNMOHlCOGlsIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  },
  {
    "messages": [
      {
        "role": "user",
        "content": "use the builtin function filter to filter a list of even numbers between 0 and 100 so that only tenth value is remaining. print the result"
      },
      {
        "role": "assistant",
        "content": "```graffiticode\n| Function to check if a number is a multiple of 10\nlet isMultipleOfTen = <x: eq mod x 10 0>..\n\n| Generate a list of even numbers from 0 to 100\nlet evens = range 0 101 2..\n\n| Filter the even numbers to only multiples of 10\nlet tens = filter (isMultipleOfTen) evens..\n\n| Print the resulting list\nprint tens..\n```"
      }
    ],
    "code": "| Function to check if a number is a multiple of 10\nlet isMultipleOfTen = <x: eq mod x 10 0>..\n\n| Generate a list of even numbers from 0 to 100\nlet evens = range 0 101 2..\n\n| Filter the even numbers to only multiples of 10\nlet tens = filter (isMultipleOfTen) evens..\n\n| Print the resulting list\nprint tens..",
    "explanation": "L0002 program that filters elements from a collection.",
    "expected_output": "isMultipleOfTen = <function>",
    "lang": "0002",
    "task_id": "eyJ0YXNrSWRzIjpbInlxUFJXY3VEMnNDMjcydnB2SWVVIl19",
    "code_source": "help_message_code",
    "usage_count": 1,
    "pair_count": 1
  }
]